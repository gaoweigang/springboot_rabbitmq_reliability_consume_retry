#如何保证可靠性消费？
所谓事务性处理，是指对一个消息的处理必须严格可控，必须满足原子性，只有两种可能的处理结果：
(1) 处理成功，从队列中删除消息
(2) 处理失败(网络问题，程序问题，服务挂了)，将消息重新放回队列
为了做到这点，我们使用rabbitmq的手动ack模式，这个后面细说。
具体处理办法：
1.首先需要设置消息确认模式为手动
/**
	 * 监听器配置
	 */
	@Bean
	public RabbitListenerContainerFactory<?> rabbitListenerContainerFactory(){
		SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory = new SimpleRabbitListenerContainerFactory();
		rabbitListenerContainerFactory.setConnectionFactory(connectionFactory());
		rabbitListenerContainerFactory.setConcurrentConsumers(1);
		rabbitListenerContainerFactory.setMaxConcurrentConsumers(10);
		rabbitListenerContainerFactory.setAcknowledgeMode(AcknowledgeMode.MANUAL);//设置消息确认模式为手动
		return rabbitListenerContainerFactory;
	}
2.失败后发送nack使信息重新投递
channel.basicNack(response.getEnvelope().getDeliveryTag(), false, true);//前提需要设置手动确认，否则无效





参考：
RabbitMQ的ack与nack ：https://blog.csdn.net/kdc18333608478/article/details/77552546?foxhandler=RssReadRenderProcessHandler
rabbitmq可靠确认模式的java封装及示例：https://www.jianshu.com/p/4112d78a8753
rabbitMq集成Spring后，消费者设置手动ack，并且在业务上控制是否ack: https://blog.csdn.net/u010841296/article/details/52253684


后续：
broker未收到ack或nack是如何处理的？


